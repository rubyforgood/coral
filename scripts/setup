#!/bin/bash

# Get script directory
SOURCE="${BASH_SOURCE[0]}"
while [ -h "${SOURCE}" ]; do # resolve ${SOURCE} until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "${SOURCE}" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "${SOURCE}")"
  [[ ${SOURCE} != /* ]] && SOURCE="${DIR}/${SOURCE}" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPT_DIR="$( cd -P "$( dirname "${SOURCE}" )" >/dev/null 2>&1 && pwd )"

# Ensure docker dependencies are available
${SCRIPT_DIR}/bootstrap
BOOTSTRAP_RESULT=$?
if [ ${BOOTSTRAP_RESULT} != 0 ]; then
  echo "Error bootstrapping dependencies"
  exit ${BOOTSTRAP_RESULT}
fi

# Pull containers
echo "Pulling container images..."
docker-compose -f ${SCRIPT_DIR}/../docker-compose.yml pull
PULL_RESULT=$?
if [ ${PULL_RESULT} != 0 ]; then
  echo "Error pulling container images for main compose file"
  exit ${PULL_RESULT}
fi
docker-compose -f ${SCRIPT_DIR}/../docker-compose.webpacker_dev.yml pull
PULL_RESULT=$?
if [ ${PULL_RESULT} != 0 ]; then
  echo "Error pulling container images for webpacker_dev compose file"
  exit ${PULL_RESULT}
fi
docker-compose -f ${SCRIPT_DIR}/../docker-compose.selenium_chrome.yml pull
PULL_RESULT=$?
if [ ${PULL_RESULT} != 0 ]; then
  echo "Error pulling container images for selenium_chrome"
  exit ${PULL_RESULT}
fi
echo "Successfully pulled container images"

# Build web and webpacker_dev
echo "Building containers"
CURRENT_DIR=$(pwd)
cd ${SCRIPT_DIR}/..
docker-compose -f ${SCRIPT_DIR}/../docker-compose.yml -f ${SCRIPT_DIR}/../docker-compose.webpacker_dev.yml -f ${SCRIPT_DIR}/../docker-compose.selenium_chrome.yml build
BUILD_RESULT=$?
cd ${CURRENT_DIR}
if [ ${BUILD_RESULT} != 0 ]; then
  echo "Error building containers"
  exit ${BUILD_RESULT}
fi
echo "Successfully built containers"

echo "Successfully setup application"
exit 0
